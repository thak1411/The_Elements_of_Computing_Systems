// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = calc, sel = instruction[15], out = selA);
    Not(in = instruction[15], out = notA);
    Or(a = instruction[5], b = notA, out = loadA);
    ARegister(in = selA, load = loadA, out = A);

    And(a = instruction[4], b = instruction[15], out = loadD);
    DRegister(in = calc, load = loadD, out = D);

    Mux16(a = A, b = inM, sel = instruction[12], out = AM);
    ALU(x = D, y = AM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = calc, zr = ZF, ng = NF);

    Or16(a = calc, b[0..15] = false, out = outM);
    And(a = instruction[15], b = instruction[3], out = writeM);
    Or16(a = A, b[0..15] = false, out[0..14] = addressM, out[15] = trash1);

    And(a = NF, b = instruction[2], out = jl);
    And(a = ZF, b = instruction[1], out = jz);
    Not(in = NF, out = NNF);
    Not(in = ZF, out = NZF);
    And(a = NNF, b = NZF, out = PF);
    And(a = PF, b = instruction[0], out = jg);
    Or(a = jl, b = jg, out = j);
    Or(a = j, b = jz, out = jp);
    And(a = jp, b = instruction[15], out = jump);

    PC(in = A, load = jump, inc = true, reset = reset, out[0..14] = pc, out[15] = trash2);
}